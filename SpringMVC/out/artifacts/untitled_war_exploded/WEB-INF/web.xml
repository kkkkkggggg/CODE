<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--SpringMVC思想是有一个前端控制器能拦截所有请求，并智能派发
    这个前端控制器是一个Servlet；应该在web.xml中配置这个Servlet来拦截所有的请求
    -->

    <!--SpringMVC的前置控制器，响应和处理所有请求-->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <!--contextConfigLocation：指定SpringMVC配置文件地址-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--Servlet启动加载，servlet原本是第一次访问创建对象；
        load-on-startup：服务器启动的时候创建对象，值越小优先级越高
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>


    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--
            /*和/都是拦截所有所有请求：
            /:会拦截所有请求，但是不会拦截jsp
            /*:的拦截范围更大：还会拦截到*.jsp这些请求，一旦拦截了jsp页面就不能显示了

            处理 *.jsp 是tomcat做的事;所有项目中的小web.xml都是继承于大web.xml
            DefaultServlet是Tomcat中处理静态资源的
                除jsp、servlet外，剩下的都是静态资源
                index.html：静态资源，tomcat就会在服务器下找到这个资源并返回
                在前端控制器中使用/拦截请求，相当于禁用了tomcat服务器中的DefaultServlet


            1）服务器的大web.xml中有一个DefaultServlet是url-pattern=/
            2）我们的配置中前端控制器url=pattern=/
                    静态资源会来到DispatcherServlet（前端控制器）看哪个方法的RequeMapping是index.html,导致静态资源访问失败
            3）为什么jsp又能访问；因为我们没有覆盖服务器中的JspServlet的配置
            4） /* 直接写/*就是拦截所有请求，我们写 / 也是为了迎合以后的Rest风格URL地址
          -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>