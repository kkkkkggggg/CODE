package day11_00;

import org.junit.Test;
import sun.security.jca.GetInstance;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.util.Properties;

/**
 * @acthor KKKKK
 * @creay 2021-04-29-{TIME}
 */
public class ClassLoaderTest
{
    @Test
    public void test()
    {
        //对于自定义类使用系统类加载器进行加载
        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();
        System.out.println(classLoader);

        //调用系统类加载器的getParent()：获取扩展类加载器
        ClassLoader parent = classLoader.getParent();
        System.out.println(parent);

        //通过调用扩展类加载器的getParent():无法获取引导类加载器
        //引导类加载器主要负责加载java的核心类库，无法加载自定义类
        ClassLoader parent1 = parent.getParent();
        System.out.println(parent1);

        ClassLoader classLoader1 = String.class.getClassLoader();
        System.out.println(classLoader1);
    }

    /*
    Properties:用来读取配置文件
     */
    @Test
    public void test1() throws IOException
    {
        Properties pros = new Properties();
        //此时的文件默认在当前的module下
        //读取配置文件的方式一
//        FileInputStream fis = new FileInputStream("jdbc.properties");
//        pros.load(fis);

        //读取配置文件的方式二：使用ClassLoader
        //配置文件默认识别路径为当前module的src下
        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();
        InputStream is = classLoader.getResourceAsStream("jdbc1.properties");
        pros.load(is);


        String name = pros.getProperty("name");
        String password = pros.getProperty("password");
        System.out.println("name = " + name + " password = " + password);

    }
    @Test
    public void test2() throws NoSuchMethodException
    {
        Class<Person> clazz = Person.class;

        Constructor<Person> constructor = clazz.getDeclaredConstructor();

        constructor.setAccessible(true);


    }

    @Test
    public void test3()
    {
        System.out.println(Person.class.getClassLoader());

    }
}
