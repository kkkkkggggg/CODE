<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:名称空间，写接口的全类名，相当于告诉mybatis这个配置文件是实现哪个接口的-->
<mapper namespace="com.atck.dao.TeacherDAO">
    <!--    public Teacher getTeacherById(Integer id);-->
   <select id="getTeacherById" resultMap="teacherMap">
       select * from t_teacher where id = #{id}
   </select>

    <!--if判断-->
    <!--public List<Teacher> getTeacherByCondition(Teacher teacher);-->
    <select id="getTeacherByCondition" resultMap="teacherMap">
        select * from t_teacher

        <!--trim截取字符串
        prefix="" ：前缀，为下面的sql整体添加一个前缀
        prefixOverrides="" 去除整体字符串前面多余的字符
        suffix="" 为整体添加一个后缀
        suffixOverrides=""  去除整体字符串后面多余的字符
        -->
        <!--我们查询条件就放在where标签中，每个and写在前面，where帮我们自动去除前面的多余的and-->
        <trim prefix="where" prefixOverrides="and" suffixOverrides="and">
            <!--
           test=""：编写判断条件
           id!=null:取出传入的javaBean属性中的id值，判断其是否为空
           -->
            <if test="id!=null">
                id > #{id} and
            </if>

            <!--空串
            and  &amp;&amp;
            or  ||
            if():传入非常强大的判断条件，OGNL表达式
            在MyBatis中，传入的参数可以用来做判断
            额外还有两个东西
            _parameter:代表传入的参数
                1）、传入了单个参数，_parameter就代表这个参数
                2）、传入了多个参数，_parameter就代表多个参数集合起来的map
            _databaseid:代表当前环境
                如果databaseIdProvider,_databaseid就有值
            -->
            <if test="name != null &amp;&amp; !name.equals(&quot;&quot;)">
               teachername like #{name} and
            </if>
            <if test="birth != null">
               birth_date &lt; #{birth} and
            </if>
        </trim>
    </select>

    <!--public List<Teacher> getTeacherByIdIn(List<Integer> ids);-->
    <select id="getTeacherByIdIn" resultMap="teacherMap">
        select * from t_teacher where id in
        <!--帮我们遍历集合的
        collection：指定要遍历的集合的key
        close="" 以什么结束
        index="" 索引
                如果便利的是一个list，index：指定的变量保存了当前索引
                    item：保存当前元素的值
                如果遍历的是一个map，index：指定的变量保存了当前遍历元素的key
                    item：保存当前元素的值
        item="" 变量名，每次遍历出的元素起一个变量名，方便引用
        open="" 以什么开始
        separator="":每次遍历元素的分隔符
        -->
        <if test="ids.size > 0">
            <foreach collection="ids" open="(" close=")" item="id_item" separator=",">
                #{id_item}
            </foreach>
        </if>
    </select>

    <!--public List<Teacher> getTeacherByConditionChoose(Teacher teacher);-->
    <select id="getTeacherByConditionChoose" resultMap="teacherMap">
        select * from t_teacher
        <where>
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="name.equals(&quot;&quot;) &amp;&amp; name != null">
                    teachername = #{name}
                </when>
                <when test="birth != null">
                    birth_date = #{birth}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>


    <!--public int updateTeacher(Teacher teacher);-->
    <update id="updateTeacher">
        update t_teacher
        <set>
            <if test="name!=null and !name.equals(&quot;&quot;)">
               teachername=#{name},
            </if>
            <if test="course!=null and !course.equals(&quot;&quot;)">
                class_name=#{course},
            </if>
            <if test="address!=null and !address.equals(&quot;&quot;)">
                address=#{address},
            </if>
            <if test="birth!=null and !birth.equals(&quot;&quot;)">
                birth_date=#{birth}
            </if>
        </set>
        <where>
            id = #{id}
        </where>
    </update>


    <resultMap id="teacherMap" type="com.atck.bean.Teacher">
        <id property="id" column="id"/>
        <result property="name" column="teachername"/>
        <result property="course" column="class_name"/>
        <result property="address" column="address"/>
        <result property="birth" column="birth_date"/>
    </resultMap>


</mapper>