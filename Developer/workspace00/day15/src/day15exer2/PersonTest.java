package day15exer2;
/*
 * 方法的重写(override/overwrite)
 * 1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作
 *
 * 2.应用：重写以后，当创建子类对象时，通过子类对象调用子父类中同名同参
 * 数的方法时，实际执行的是子类重写父类的方法
 * 
 * 3.重写的规定
 * 			方法的声明：权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型
 * 							{
 * 								方法体
 * 							}
 * 			约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法
 * 			①子类重写的方法的方法名和形参列表与父类被重写的方法和
 * 			形参列表相同
 * 			②子类重写的方法的权限修饰符不小于父类被重写的方法的权限
 * 			修饰符
 * 				>特殊情况：子类中不能重写父类中声明为private的方法
 * 			③返回值类型
 * 				>父类：void   子类：必须为void
 * 				>父类被重写的方法返回值是A类型，则子类重写的方法的
 * 				返回值类型可以是A类或A类的子类
 * 				>父类被重写的方法返回值是基本数据类型，子类重写的方
 * 				法的返回值类型必须与父类相同
 * 			④子类重写的方法抛出的异常类型不大于父类中被重写的方法抛出的异常类型
 * *****************************************************************************
 * 			子类和父类中同名同参数的方法要么都声明为非static的(考虑重写)，要么都声明为static的 
*/
public class PersonTest
{
	public static void main(String args[])
	{
		Student s = new Student("工设");
		
		s.age = 10;
		s.name = "玩意";
		
		
		s.eat();
		s.walk(500);
		s.study();
	}
	
	
	
}
